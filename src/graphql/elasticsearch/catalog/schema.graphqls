scalar JSON

type Products {
  _index: String
  _id: Int
  _score: Float
  _source: JSON
}

type Query {
  products (
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        range: ProductRangeInput @doc(description: "Identifies which product attributes to search range for and return."),
        sort: ProductSortInput @doc(description: "Specifies which attribute to sort on, and whether to return the results in ascending or descending order.")
     ): [Products]
}

type Query {
  searchProducts (
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        range: ProductRangeInput @doc(description: "Identifies which product attributes to search range for and return."),
        sort: ProductSortInput @doc(description: "Specifies which attribute to sort on, and whether to return the results in ascending or descending order.")
     ): [Products]
}

input FilterTypeInput {
    gte: Float @doc(description: "Greater than or equal to")
    gt: Float @doc(description: "Greater than")
    lte: Float @doc(description: "Less than or equal to")
    lt: Float @doc(description: "Less than")
}

input ProductSortInput {
    name: SortEnum @doc(description: "The product name. Customers use this name to identify the product.")
    sku: SortEnum @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer")
    description: SortEnum @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: SortEnum @doc(description: "A short description of the product. Its use depends on the theme.")
    price: SortEnum @doc(description: "The price of the item")
    special_price: SortEnum @doc(description: "The discounted price of the product")
    special_from_date: SortEnum @doc(description: "The beginning date that a product has a special price")
    special_to_date: SortEnum @doc(description: "The end date that a product has a special price")
    weight: SortEnum @doc(description: "The weight of the item, in units defined by the store")
    manufacturer: SortEnum @doc(description: "A number representing the product's manufacturer")
    meta_title: SortEnum @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists")
    meta_keyword: SortEnum @doc(description: "A comma-separated list of keywords that are visible only to search engines")
    meta_description: SortEnum @doc(description: "A brief overview of the product for search results listings, maximum 255 characters")
    image: SortEnum @doc(description: "The relative path to the main image on the product page")
    small_image: SortEnum @doc(description: "The relative path to the small image, which is used on catalog pages")
    thumbnail: SortEnum @doc(description: "The relative path to the product's thumbnail image")
    tier_price: SortEnum @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached")
    news_from_date: SortEnum @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product")
    news_to_date: SortEnum @doc(description: "The end date for new product listings")
    custom_layout_update: SortEnum @doc(description: "XML code that is applied as a layout update to the product page")
    options_container: SortEnum @doc(description: "If the product has multiple options, determines where they appear on the product page")
    required_options: SortEnum @doc(description: "Indicates whether the product has required options")
    has_options: SortEnum @doc(description: "Indicates whether additional attributes have been created for the product")
    image_label: SortEnum @doc(description: "The label assigned to a product image")
    small_image_label: SortEnum @doc(description: "The label assigned to a product's small image")
    thumbnail_label: SortEnum @doc(description: "The label assigned to a product's thumbnail image")
    created_at: SortEnum @doc(description: "Timestamp indicating when the product was created")
    updated_at: SortEnum @doc(description: "Timestamp indicating when the product was updated")
    country_of_manufacture: SortEnum @doc(description: "The product's country of origin")
    custom_layout: SortEnum @doc(description: "The name of a custom layout")
    gift_message_available: SortEnum @doc(description: "Indicates whether a gift message is available")
}

input ProductFilterInput {
    name: String @doc(description: "The product name. Customers use this name to identify the product.")
    sku: [String] @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer")
    description: String @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: String @doc(description: "A short description of the product. Its use depends on the theme.")
    manufacturer: String @doc(description: "A number representing the product's manufacturer")
    meta_title: String @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists")
    meta_keyword: String @doc(description: "A comma-separated list of keywords that are visible only to search engines")
    meta_description: String @doc(description: "A brief overview of the product for search results listings, maximum 255 characters")
    image: String @doc(description: "The relative path to the main image on the product page")
    small_image: String @doc(description: "The relative path to the small image, which is used on catalog pages")
    thumbnail: String @doc(description: "The relative path to the product's thumbnail image")
    custom_layout_update: String @doc(description: "XML code that is applied as a layout update to the product page")
    category_ids: [Int] @doc(description: "Category ID the product belongs to")
    options_container: String @doc(description: "If the product has multiple options, determines where they appear on the product page")
    required_options: Boolean @doc(description: "Indicates whether the product has required options")
    has_options: Boolean @doc(description: "Indicates whether additional attributes have been created for the product")
    image_label: String @doc(description: "The label assigned to a product image")
    small_image_label: String @doc(description: "The label assigned to a product's small image")
    thumbnail_label: String @doc(description: "The label assigned to a product's thumbnail image")
    country_of_manufacture: String @doc(description: "The product's country of origin")
    custom_layout: String @doc(description: "The name of a custom layout")
    gift_message_available: Boolean @doc(description: "Indicates whether a gift message is available")
    or: String @doc(description: "The keyword required to perform a logical OR comparison")
    color: [Int] @doc(description: "The product color. Customers use this color to identify the products.")
    size: [Int] @doc(description: "The product size. Customers use this size to identify the products.")
}

input ProductRangeInput {
    price: [FilterTypeInput] @doc(description: "The price of an item")
    special_price: FilterTypeInput @doc(description: "The discounted price of the product")
    special_from_date: FilterTypeInput @doc(description: "The beginning date that a product has a special price")
    special_to_date: FilterTypeInput @doc(description: "The end date that a product has a special price")
    weight: FilterTypeInput @doc(description: "The weight of the item, in units defined by the store")
    tier_price: FilterTypeInput @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached")
    news_from_date: FilterTypeInput @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product")
    news_to_date: FilterTypeInput @doc(description: "The end date for new product listings")
    min_price: FilterTypeInput @doc(description:"The numeric minimal price of the product. Do not include the currency code.")
    max_price: FilterTypeInput @doc(description:"The numeric maximal price of the product. Do not include the currency code.")
    special_price: FilterTypeInput @doc(description:"The numeric special price of the product. Do not include the currency code.")
    created_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was created")
    updated_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was updated")
}

enum SortEnum {
    ASC
    DESC
}